var express = require('express');
var app = express();
var port = process.env.PORT || process.argv[2] || 3000;
var refreshTime = process.env.REFRESH_TIME || 3600 * 60; // in ms
var swig = require("swig");
var request = require("request");

// set swig in express
app.engine('html', swig.renderFile);
app.set('view engine', 'html');
app.set('views', __dirname + '/templates');

//CORS middleware
var allowCrossDomain = function(req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  next();
}
app.use(allowCrossDomain);


var Datastore = require('nedb');

var workmen = require("./lib/workmen");
runWorker = function(){
  new workmen(function(pkg,dbNew){
    // worker finished - reload db
    console.log("reloading db");
    db = dbNew; 
  })
}
runWorker();
// TODO: make this dynamic
interval = setInterval(runWorker, refreshTime * 1000);

// name has to uniq
app.get('/hello', function(req, res){
  res.send('Hello World');
});

// TODO: keep only one DB instance

app.get('/all', function(req, res){
  db().find().exec(function (err, pkgs) {
    console.log("len", pkgs.length);
    res.jsonp(pkgs);
  });
});

app.get('/detail/:name', function(req, res){
  var name = req.params.name;
  db().find({name: name}).exec(function (err, pkgs) {
    if( pkgs.length == 0){
      console.log("package " + name + " does not exist.");
    }
    var pkg = pkg[0];
    res.jsonp(pkg);
  });
});

function convertGithubToRaw(contentURL){
  contentURL = contentURL.replace("github.com", "raw.githubusercontent.com");
  contentURL = contentURL.replace("blob/", "");
  return contentURL;
}

app.get('/demo/:name/:snip', function(req, res){
  var name = req.params.name;
  var currentSnip = req.params.snip;
  db().find({name: name}).exec(function (err, pkg) {
    var pkg = pkg[0];
    var snip = pkg.latest.sniper;

    // load browserified version
    snip.js.push("http://wzrd.in/standalone/" + pkg.name + "@" + pkg.version);

    var expected = 0;
    var counter = 0;
    var finalTrigger = function(){
      counter++;
      if(expected == counter){
        res.render("single", {scripts: snip.js, css: snip.css, inlineScript: inlineScript, inlineBody: inlineBody});
      }
    }

    var baseURL = convertGithubToRaw(pkg.github.html_url + "/" + pkg.github.default_branch);

    // css
    // the user might specify alternative css locations
    if( snip.buildCSS !== undefined){
      snip.css = snip.buildCSS;
    }

    // translate all absolute URLs to github
    for(var i in snip.css){
      if(snip.css[i].charAt(0) === "/"){
        snip.css[i] = baseURL + snip.css[i];
      }
    }

    // remove the build js (generated by browserify)
    var index = 0;
    while(index < snip.js.length){ 
      if(snip.js[index].substring(0,7) === "/build/"){
        snip.js.shift();
      } else {
        index++;
      }
    }

    // js
    expected++;
    inlineScript = "";
    var jsURL = convertGithubToRaw(snip.srcs[currentSnip].js.html_url);
    request.get(jsURL, function (err, response, body) {
      inlineScript = body;
      finalTrigger();
    });

    // html
    var inlineBody = "";
    if(snip.srcs[currentSnip].html !== undefined ){
      expected++;
      var htmlURL = convertGithubToRaw(snip.srcs[currentSnip].html.html_url);
      request.get(htmlURL, function (err, response, body) {
        inlineBody = body;
        finalTrigger();
      });
    }else{
      inlineBody = "<div id=yourDiv></div>";
    }

  });
});

// list available snips
app.get('/demo/:name', function(req, res){
  var name = req.params.name;
  var currentSnip = req.params.snip;
  db().find({name: name}).exec(function (err, pkg) {
    var pkg = pkg[0];
    var baseURL = req.protocol + '://' + req.get('host') + req.originalUrl;
    // remove path at the end
    if(baseURL.charAt(baseURL.length - 1) !== "/" ){
      baseURL += "/";
    }
    var snips = Object.keys(pkg.latest.sniper.srcs);
    res.render("list",{snips: snips, baseHref: baseURL}); 
  });
});

app.get('/', function(req, res){
  res.sendFile("./README.md", {root: __dirname});
});

var server = app.listen(port, function() {
  console.log('Listening on port %d', server.address().port);
});
